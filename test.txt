import { useState, useEffect } from "react";

interface DomainListProps {
  initialDomains?: string[];
  onDomainsChange: (domains: string[], hasErrors: boolean) => void;
  isSubmitted: boolean;
}

export default function DomainList({ initialDomains = [""], onDomainsChange, isSubmitted }: DomainListProps) {
  const [domains, setDomains] = useState<string[]>(initialDomains.length > 0 ? initialDomains : [""]);
  const [errors, setErrors] = useState<string[]>(initialDomains.map(domain => validateDomain(domain)));

  useEffect(() => {
    const hasErrors = domains.some((domain, index) => !domain || !!errors[index]);
    onDomainsChange(domains, hasErrors);
  }, [domains, errors, onDomainsChange]);

  const addDomain = () => {
    if (domains.length < 10) {
      setDomains([...domains, ""]);
      setErrors([...errors, ""]);
    }
  };

  const removeDomain = (index: number) => {
    if (domains.length > 1) {
      const newDomains = domains.filter((_, i) => i !== index);
      const newErrors = errors.filter((_, i) => i !== index);
      setDomains(newDomains);
      setErrors(newErrors);
    }
  };

  function validateDomain(value: string): string {
    if (value === "") return ""; // No error initially
    if (!/^https?:\/\/|www\./.test(value)) {
      return "Domain must start with 'https://', 'http://', or 'www.'";
    }
    return "";
  }

  const handleChange = (index: number, value: string) => {
    const newDomains = [...domains];
    newDomains[index] = value;

    const newErrors = [...errors];
    newErrors[index] = validateDomain(value);

    setDomains(newDomains);
    setErrors(newErrors);
  };

  return (
    <div className="p-4 space-y-4">
      {domains.map((domain, index) => (
        <div key={index} className="p-4 border rounded-md space-y-2">
          <div className="flex items-center gap-4">
            <input
              type="text"
              placeholder="Enter domain"
              value={domain}
              onChange={e => handleChange(index, e.target.value)}
              className={`flex-1 p-2 border rounded-md ${
                errors[index] || (isSubmitted && !domain) ? "border-red-500" : "border-gray-300"
              }`}
            />
            {index > 0 && (
              <button
                onClick={() => removeDomain(index)}
                className="text-red-500 text-lg p-2 rounded hover:bg-red-100"
              >
                ‚ùå
              </button>
            )}
          </div>
          {(errors[index] || (isSubmitted && !domain)) && (
            <p className="text-red-500 text-sm">{errors[index] || "This field is required"}</p>
          )}
        </div>
      ))}

      <button
        onClick={addDomain}
        disabled={domains.length >= 10}
        className={`p-2 rounded-md text-white ${domains.length >= 10 ? "bg-gray-400 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-600"}`}
      >
        Add More
      </button>
    </div>
  );
}import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import Tooltip from "../Tooltip"; // Adjust path as needed

describe("Tooltip Component", () => {
  const text = "Tooltip Text";
  const image = "test-image.png";

  test("renders tooltip icon", () => {
    render(<Tooltip text={text} image={image} />);

    // Check if image is rendered
    const imgElement = screen.getByAltText("Tooltip-icon");
    expect(imgElement).toBeInTheDocument();
    expect(imgElement).toHaveAttribute("src", image);
  });

  test("does not show tooltip text initially", () => {
    render(<Tooltip text={text} image={image} />);

    // Tooltip text should not be visible initially
    const tooltipText = screen.queryByText(text);
    expect(tooltipText).not.toBeInTheDocument();
  });

  test("shows tooltip text on hover", () => {
    render(<Tooltip text={text} image={image} />);

    // Simulate mouse enter
    const imgElement = screen.getByAltText("Tooltip-icon");
    fireEvent.mouseEnter(imgElement);

    // Tooltip should now be visible
    expect(screen.getByText(text)).toBeInTheDocument();
  });

  test("hides tooltip text on mouse leave", () => {
    render(<Tooltip text={text} image={image} />);

    const imgElement = screen.getByAltText("Tooltip-icon");
    
    // Simulate hover
    fireEvent.mouseEnter(imgElement);
    expect(screen.getByText(text)).toBeInTheDocument();

    // Simulate mouse leave
    fireEvent.mouseLeave(imgElement);
    expect(screen.queryByText(text)).not.toBeInTheDocument();
  });

  test("renders without an image (edge case)", () => {
    render(<Tooltip text={text} image="" />);
    
    // Image should not be in the document
    expect(screen.queryByAltText("Tooltip-icon")).not.toBeInTheDocument();
  });
});




import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import Tooltip from "../Tooltip"; // Adjust path as needed

describe("Tooltip Component", () => {
  const text = "Tooltip Text";
  const image = "test-image.png";

  test("renders tooltip icon", () => {
    render(<Tooltip text={text} image={image} />);

    // Check if image is rendered
    const imgElement = screen.getByAltText("Tooltip-icon");
    expect(imgElement).toBeInTheDocument();
    expect(imgElement).toHaveAttribute("src", image);
  });

  test("does not show tooltip text initially", () => {
    render(<Tooltip text={text} image={image} />);

    // Tooltip text should not be visible initially
    const tooltipText = screen.queryByText(text);
    expect(tooltipText).not.toBeInTheDocument();
  });

  test("shows tooltip text on hover", () => {
    render(<Tooltip text={text} image={image} />);

    // Simulate mouse enter
    const imgElement = screen.getByAltText("Tooltip-icon");
    fireEvent.mouseEnter(imgElement);

    // Tooltip should now be visible
    expect(screen.getByText(text)).toBeInTheDocument();
  });

  test("hides tooltip text on mouse leave", () => {
    render(<Tooltip text={text} image={image} />);

    const imgElement = screen.getByAltText("Tooltip-icon");
    
    // Simulate hover
    fireEvent.mouseEnter(imgElement);
    expect(screen.getByText(text)).toBeInTheDocument();

    // Simulate mouse leave
    fireEvent.mouseLeave(imgElement);
    expect(screen.queryByText(text)).not.toBeInTheDocument();
  });

  test("renders without an image (edge case)", () => {
    render(<Tooltip text={text} image="" />);
    
    // Image should not be in the document
    expect(screen.queryByAltText("Tooltip-icon")).not.toBeInTheDocument();
  });
});



import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import TooltipRadio from "../TooltipRadio"; // Adjust path as needed

describe("TooltipRadio Component", () => {
  const text = "Tooltip Text";
  const image = "test-image.png";

  test("renders tooltip icon", () => {
    render(<TooltipRadio text={text} image={image} />);

    // Check if image is rendered
    const imgElement = screen.getByAltText("Tooltip-icon");
    expect(imgElement).toBeInTheDocument();
    expect(imgElement).toHaveAttribute("src", image);
  });

  test("does not show tooltip text initially", () => {
    render(<TooltipRadio text={text} image={image} />);

    // Tooltip text should not be visible initially
    const tooltipText = screen.queryByText(text);
    expect(tooltipText).not.toBeInTheDocument();
  });

  test("shows tooltip text on hover", () => {
    render(<TooltipRadio text={text} image={image} />);

    // Simulate mouse enter
    const imgElement = screen.getByAltText("Tooltip-icon");
    fireEvent.mouseEnter(imgElement);

    // Tooltip should now be visible
    expect(screen.getByText(text)).toBeInTheDocument();
  });

  test("hides tooltip text on mouse leave", () => {
    render(<TooltipRadio text={text} image={image} />);

    const imgElement = screen.getByAltText("Tooltip-icon");
    
    // Simulate hover
    fireEvent.mouseEnter(imgElement);
    expect(screen.getByText(text)).toBeInTheDocument();

    // Simulate mouse leave
    fireEvent.mouseLeave(imgElement);
    expect(screen.queryByText(text)).not.toBeInTheDocument();
  });

  test("renders without an image (edge case)", () => {
    render(<TooltipRadio text={text} image="" />);
    
    // Image should not be in the document
    expect(screen.queryByAltText("Tooltip-icon")).not.toBeInTheDocument();
  });
});


import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import TextInputField from './TextInputField';

describe('TextInputField Component', () => {
  const setup = (props = {}) => {
    return render(<TextInputField label="Test Label" name="testInput" {...props} />);
  };

  test('renders the input field with label', () => {
    setup();
    expect(screen.getByText('Test Label')).toBeInTheDocument();
    expect(screen.getByRole('textbox')).toBeInTheDocument();
  });

  test('displays an error when required field is left empty', () => {
    setup({ required: true });
    
    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: '' } });
    fireEvent.blur(input);

    expect(screen.getByText(/field is Invalid/i)).toBeInTheDocument();
  });

  test('displays an error when input length is less than minimum required', () => {
    setup({ minLength: 5 });

    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: 'abc' } });
    fireEvent.blur(input);

    expect(screen.getByText(/length of Partner id must be at least/i)).toBeInTheDocument();
  });

  test('calls onChange when typing in the input', () => {
    const handleChange = jest.fn();
    setup({ onChange: handleChange });

    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: 'New Value' } });

    expect(handleChange).toHaveBeenCalledTimes(1);
    expect(handleChange).toHaveBeenCalledWith('New Value');
  });

  test('calls onFocus and onBlur events', () => {
    const handleFocus = jest.fn();
    const handleBlur = jest.fn();
    setup({ onFocus: handleFocus, onBlur: handleBlur });

    const input = screen.getByRole('textbox');
    
    fireEvent.focus(input);
    expect(handleFocus).toHaveBeenCalledTimes(1);

    fireEvent.blur(input);
    expect(handleBlur).toHaveBeenCalledTimes(1);
  });

  test('disables input when disabled prop is true', () => {
    setup({ disabled: true });

    const input = screen.getByRole('textbox');
    expect(input).toBeDisabled();
  });

});


==========
import messageReducer, { setMessageData } from './messageSlice';

describe('messageSlice reducer', () => {
  const initialState = { responseData: {} };

  test('should return the initial state when passed an unknown action', () => {
    expect(messageReducer(undefined, { type: 'unknown' })).toEqual(initialState);
  });

  test('should handle setMessageData action', () => {
    const payload = { key: 'value' };
    const action = setMessageData(payload);
    const expectedState = { responseData: payload };

    expect(messageReducer(initialState, action)).toEqual(expectedState);
  });

  test('should correctly update responseData when setMessageData is dispatched', () => {
    const previousState = { responseData: { oldKey: 'oldValue' } };
    const newPayload = { newKey: 'newValue' };
    
    const newState = messageReducer(previousState, setMessageData(newPayload));
    
    expect(newState.responseData).toEqual(newPayload);
  });
});

============

import platformReducer, { setPlatformData, updateField, resetUpdatedFields } from './platformSlice';

describe('platformSlice reducer', () => {
  const initialState = {
    platform: '',
    page_type: '',
    configuration: {},
    updatedFields: {},
    endpoint: {},
  };

  test('should return the initial state when passed an unknown action', () => {
    expect(platformReducer(undefined, { type: 'unknown' })).toEqual(initialState);
  });

  test('should handle setPlatformData action', () => {
    const payload = {
      platform: 'iOS',
      page_type: 'home',
      configuration: { theme: 'dark' },
      endpoint: { url: 'https://api.example.com' },
    };
    const action = setPlatformData(payload);
    const expectedState = { ...initialState, ...payload };

    expect(platformReducer(initialState, action)).toEqual(expectedState);
  });

  test('should handle updateField action', () => {
    const previousState = {
      ...initialState,
      updatedFields: { existingField: 'oldValue' },
      configuration: { existingField: 'oldValue' },
    };

    const action = updateField({ field: 'newField', value: 'newValue' });

    const newState = platformReducer(previousState, action);

    expect(newState.updatedFields).toEqual({
      existingField: 'oldValue',
      newField: 'newValue',
    });

    expect(newState.configuration).toEqual({
      existingField: 'oldValue',
      newField: 'newValue',
    });
  });

  test('should handle resetUpdatedFields action', () => {
    const previousState = {
      ...initialState,
      updatedFields: { field1: 'value1', field2: 'value2' },
    };

    const newState = platformReducer(previousState, resetUpdatedFields());

    expect(newState.updatedFields).toEqual({});
  });
});
