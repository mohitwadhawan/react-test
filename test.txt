import { useState, useEffect } from "react";

interface Domain {
  id: number;
  value: string;
  error: string;
}

interface DomainListProps {
  onDomainsChange: (domains: Domain[]) => void; // Prop for parent
}

export default function DomainList({ onDomainsChange }: DomainListProps) {
  const [domains, setDomains] = useState<Domain[]>([
    { id: Date.now(), value: "", error: "" } // First domain always exists
  ]);

  useEffect(() => {
    onDomainsChange(domains); // Notify parent whenever domains change
  }, [domains, onDomainsChange]);

  const addDomain = () => {
    if (domains.length < 10) {
      const newDomains = [...domains, { id: Date.now(), value: "", error: "" }];
      setDomains(newDomains);
    }
  };

  const removeDomain = (id: number) => {
    if (domains.length > 1) {
      const newDomains = domains.filter(domain => domain.id !== id);
      setDomains(newDomains);
    }
  };

  const validateDomain = (value: string): string => {
    if (!/^https?:\/\/|www\./.test(value)) {
      return "Domain must start with 'https://', 'http://', or 'www.'";
    }
    return "";
  };

  const handleChange = (id: number, value: string) => {
    const newDomains = domains.map(domain =>
      domain.id === id ? { ...domain, value, error: validateDomain(value) } : domain
    );
    setDomains(newDomains);
  };

  return (
    <div className="p-4 space-y-4">
      {domains.map((domain, index) => (
        <div key={domain.id} className="p-4 border rounded-md space-y-2">
          <div className="flex items-center gap-4">
            <input
              type="text"
              placeholder="Enter domain"
              value={domain.value}
              onChange={e => handleChange(domain.id, e.target.value)}
              className={`flex-1 p-2 border rounded-md ${domain.error ? "border-red-500" : "border-gray-300"}`}
            />
            {index > 0 && ( // First domain cannot be removed
              <button
                onClick={() => removeDomain(domain.id)}
                className="text-red-500 text-lg p-2 rounded hover:bg-red-100"
              >
                ‚ùå
              </button>
            )}
          </div>
          {domain.error && <p className="text-red-500 text-sm">{domain.error}</p>}
        </div>
      ))}

      <button
        onClick={addDomain}
        disabled={domains.length >= 10}
        className={`p-2 rounded-md text-white ${domains.length >= 10 ? "bg-gray-400 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-600"}`}
      >
        Add More
      </button>
    </div>
  );
}
