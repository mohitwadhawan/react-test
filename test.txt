import React from "react";
import ReactDOM from "react-dom/client";
import { Provider } from "react-redux";
import { store } from "./store";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);

===

import React, { useEffect } from "react";
import { useDispatch } from "react-redux";
import { setPlatformData } from "./store/platformSlice";
import PlatformForm from "./components/PlatformForm";

// Add bootstrap CSS via CDN URL
const bootstrapCss = document.createElement('link');
bootstrapCss.rel = 'stylesheet';
bootstrapCss.href = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css';
document.head.appendChild(bootstrapCss);

const App: React.FC = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      // Validate and process the message from the parent
      if (event.data && event.data.platform && event.data.configuration) {
        dispatch(
          setPlatformData({
            platform: event.data.platform,
            configuration: event.data.configuration,
            endpoint: event.data.endpoint || {},
          })
        );
      }
    };

    // Listen for messages from the parent window
    window.addEventListener("message", handleMessage);

    // Cleanup the event listener on unmount
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [dispatch]);

  return (
    <div>
      <h1>React Iframe App</h1>
      
      <PlatformForm />
    </div>
  );
};

export default App;


===

import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface PlatformState {
  platform: string;
  configuration: Record<string, any>;
  updatedFields: Record<string, any>;
  endpoint: Record<string, any>;
}

const initialState: PlatformState = {
  platform: "",
  configuration: {},
  updatedFields: {},
  endpoint: {},
};

const platformSlice = createSlice({
  name: "platform",
  initialState,
  reducers: {
    setPlatformData(state, action: PayloadAction<Omit<PlatformState, "updatedFields">>) {
      state.platform = action.payload.platform;
      state.configuration = action.payload.configuration;
    },
    updateField(state, action: PayloadAction<{ field: string; value: any }>) {
      state.updatedFields[action.payload.field] = action.payload.value;
    },
    resetUpdatedFields(state) {
      state.updatedFields = {};
    },
  },
});

export const { setPlatformData, updateField, resetUpdatedFields } = platformSlice.actions;
export default platformSlice.reducer;

==

import { configureStore } from "@reduxjs/toolkit";
import platformReducer from "./platformSlice";

export const store = configureStore({
  reducer: {
    platform: platformReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

---


import React from "react";

interface TextInputFieldProps {
  label: string;
  value: string;
  onChange: (value: string) => void;
  hidden?: boolean;
  name?: string;
}

const TextInputField: React.FC<TextInputFieldProps> = ({ label, value, onChange, hidden, name }) => {
  if (hidden) return null;

  return (
    <div className="mb-3">
      <div className="mb-3 d-flex align-items-center">
        <label className="form-label me-3" style={{ minWidth: '200px', marginBottom: 0 }}>{label}:</label>
        <input 
          type="text"
          name={name}
          className="form-control"
          style={{ maxWidth: '300px' }}
          defaultValue={value} 
          onChange={(e) => onChange(e.target.value)} 
        />
      </div>
    </div>
  );
};

export default TextInputField;

====


import React from 'react';

interface TextAreaFieldProps {
  label: string;
  value: string;
  onChange: (value: string) => void;
  name?: string;
  hidden?: boolean;
}

const TextAreaField: React.FC<TextAreaFieldProps> = ({ label, value, onChange, name, hidden }) => {
  if (hidden) return null;

  return (
    <div className="mb-3">
      <div className="mb-3 d-flex align-items-center">
        <label className="form-label me-3" style={{ minWidth: '200px', marginBottom: 0 }}>{label}:</label>
        <textarea 
          defaultValue={value}
          onChange={(e) => onChange(e.target.value)}
          rows={4}
          className="form-control"
          style={{ maxWidth: '300px' }}
          name={name}
        />
      </div>
    </div>
  );
};

export default TextAreaField;


===

import React from "react";

interface SelectFieldProps {
  label: string;
  options: { value: string; label: string }[];
  value: string;
  onChange: (value: string) => void;
  hidden?: boolean;
  name?: string;
}

const SelectField: React.FC<SelectFieldProps> = ({ label, options, value, onChange, hidden, name }) => {
  if (hidden) return null;

  return (
    <div className="mb-3">
      <div className="mb-3 d-flex align-items-center">
        <label className="form-label me-3" style={{ minWidth: '200px', marginBottom: 0 }}>{label}:</label>
        <select 
          className="form-select"
          style={{ maxWidth: '300px' }}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          name={name}
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default SelectField;


====


import React, { useEffect, useState } from "react";

interface MultiSelectFieldProps {
  label: string;
  options: { value: string; label: string }[];
  selectedValues: string[];
  onChange: (values: string[]) => void;
  hidden?: boolean;
  name?: string;
}

const MultiSelectField: React.FC<MultiSelectFieldProps> = ({
  label,
  options,
  selectedValues = [],
  onChange,
  hidden,
  name,
}) => {
  const [localSelectedValues, setLocalSelectedValues] = useState<string[]>(selectedValues);

  useEffect(() => {
    setLocalSelectedValues(selectedValues);
  }, [selectedValues]);

  if (hidden) return null;

  return (
    <div className="mb-3">
      <div className="mb-3 d-flex align-items-center">
        <label className="form-label me-3 mb-0" style={{ minWidth: '200px', marginBottom: 0 }}>{label}:</label>
        <select 
          multiple 
          className="form-select"
          value={localSelectedValues}
          name={name}
          style={{ maxWidth: '300px' }}
          onChange={(e) => {
            const options = Array.from(e.target.selectedOptions, option => option.value);
            setLocalSelectedValues(options);
            onChange(options);
          }}
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default MultiSelectField;

===


import React, { useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { RootState, AppDispatch } from "../store";
import { updateField } from "../store/platformSlice";
import TextInputField from "../fields/TextInputField";
import SelectField from "../fields/SelectField";
import MultiSelectField from "../fields/MultiSelectField";
import TextAreaField from "../fields/TextAreaField";

const PlatformForm: React.FC = () => {
  const { configuration } = useSelector((state: RootState) => state.platform);
  const dispatch: AppDispatch = useDispatch();
  const [activeTab, setActiveTab] = useState("settings");
  const [isSandbox, setIsSandbox] = useState(0);
  const [sandboxActivationKey, setSandboxActivationKey] = useState(0);
  const [prodActivationKey, setProdActivationKey] = useState(0);
  const [onlineShopDomains, setOnlineShopDomains] = useState<string[]>([""]);
  const [expandedSections, setExpandedSections] = useState({
    advanced: false,
    marketing: false
  });

  const yesNoOptions = [
    { value: "0", label: "No" },
    { value: "1", label: "Yes" }
  ];

  const actionOptions = [
    { value: "AU", label: "AU" },
    { value: "CA", label: "CA" }
  ];

  const addressOptions = [
    { value: "billing", label: "Billing" },
    { value: "shipping", label: "Shipping" }
  ];

  const widgetDisplayOptions = [
    { value: "remote", label: "Remote" },
    { value: "local", label: "Local" }
  ];

  const checkoutOptions = [
    { value: "Overlay", label: "Overlay" },
    { value: "Redirect", label: "Redirect" }
  ];

  const hookOptions = [
    { value: "before", label: "Before" },
    { value: "after", label: "After" }
  ];

  const displayAreaOptions = [
    { value: "All", label: "All" },
    { value: "PDP", label: "PDP" },
    { value: "PLP", label: "PLP" },
    { value: "Cart", label: "Cart" },
    { value: "Checkout", label: "Checkout" }
  ];

  const handleAddDomain = () => {
    setOnlineShopDomains([...onlineShopDomains, ""]);
  };

  const handleRemoveDomain = (index: number) => {
    setOnlineShopDomains(onlineShopDomains.filter((_, i) => i !== index));
  };

  const handleDomainChange = (index: number, value: string) => {
    const newDomains = [...onlineShopDomains];
    newDomains[index] = value;
    setOnlineShopDomains(newDomains);
  };

  const handleActivate = () => {
    // API call logic here
  };

  const toggleSection = (section: 'advanced' | 'marketing') => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const isExcludedPlatform = ["magento", "shopify", "bigcommerce"].includes(configuration.platform);

  return (
    <div className="container py-4 d-flex justify-content-center">
      <div className="col-md-8">
        <div className="nav nav-tabs mb-4">
          <button 
            onClick={() => setActiveTab("settings")}
            className={`nav-link ${activeTab === "settings" ? "active" : ""}`}
          >
            Settings
          </button>
          <button 
            onClick={() => setActiveTab("apis")}
            className={`nav-link ${activeTab === "apis" ? "active" : ""}`}
          >
            APIs
          </button>
        </div>

        {activeTab === "settings" && (
          <form className="settings-form">
            <SelectField
              name="enabled"
              label="Enabled"
              options={yesNoOptions}
              value={configuration.enabled || ""}
              onChange={(value) => dispatch(updateField({ field: "enabled", value }))}
            />
            <TextInputField
              name="title"
              label="Title"
              value={configuration.title || ""}
              onChange={(value) => dispatch(updateField({ field: "title", value }))}
            />
            <SelectField
              name="isSandbox"
              label="Is Sandbox"
              options={yesNoOptions}
              value={isSandbox.toString()}
              onChange={(value) => setIsSandbox(Number(value))}
            />

            {isSandbox === 1 && (
              <div className="card mb-4 p-3">
                <SelectField
                  name="sandboxActivationKey"
                  label="Sandbox Activation Key"
                  options={yesNoOptions}
                  value={sandboxActivationKey.toString()}
                  onChange={(value) => setSandboxActivationKey(Number(value))}
                />
                {sandboxActivationKey === 1 && (
                  <>
                    <TextInputField
                      name="sandboxActivationKeyValue"
                      label="Sandbox Activation Key"
                      value=""
                      onChange={() => {}}
                      hidden={isExcludedPlatform}
                    />
                    <div className="card mb-4 p-3">
                      {onlineShopDomains.map((domain, index) => (
                        <div key={index} className="input-group mb-3">
                          <TextInputField
                            name={`onlineShopDomain${index}`}
                            label={`Online Shop Domain ${index + 1}`}
                            value={domain}
                            onChange={(value) => handleDomainChange(index, value)}
                            hidden={isExcludedPlatform}
                          />
                          <button 
                            type="button" 
                            className="btn btn-danger" 
                            onClick={() => handleRemoveDomain(index)}
                            style={{ height: '38px', width: '100px' }}
                          >
                            Remove
                          </button>
                        </div>
                      ))}
                      <button 
                        type="button" 
                        className="btn btn-primary mb-3" 
                        onClick={handleAddDomain}
                        style={{ height: '38px', width: '100px' }}
                      >
                        Add More
                      </button>
                      <button 
                        type="button" 
                        className="btn btn-success" 
                        onClick={handleActivate}
                        style={{ height: '38px', width: '100px' }}
                      >
                        Activate
                      </button>
                    </div>
                  </>
                )}
                <TextInputField 
                  name="sandboxMerchant"
                  label="Sandbox Merchant" 
                  value="" 
                  onChange={() => {}} 
                  hidden={sandboxActivationKey === 1 || isExcludedPlatform}
                />
                <TextInputField 
                  name="sandboxCmerchant"
                  label="Sandbox Cmerchant" 
                  value="" 
                  onChange={() => {}} 
                  hidden={sandboxActivationKey === 1 || isExcludedPlatform}
                />
                <TextInputField 
                  name="sandboxCid"
                  label="Sandbox C id" 
                  value="" 
                  onChange={() => {}} 
                  hidden={sandboxActivationKey === 1 || isExcludedPlatform}
                />
                <TextInputField 
                  name="sandboxCSecret"
                  label="Sandbox C Secret" 
                  value="" 
                  onChange={() => {}} 
                  hidden={sandboxActivationKey === 1 || isExcludedPlatform}
                />
              </div>
            )}

            {isSandbox === 0 && (
              <div className="card mb-4 p-3">
                <SelectField
                  name="prodActivationKey"
                  label="Prod Activation Key"
                  options={yesNoOptions}
                  value={prodActivationKey.toString()}
                  onChange={(value) => setProdActivationKey(Number(value))}
                />
                {prodActivationKey === 1 && (
                  <>
                    <div className="card mb-4 p-3">
                      {onlineShopDomains.map((domain, index) => (
                        <div key={index} className="input-group mb-3">
                          <TextInputField
                            name={`prodOnlineShopDomain${index}`}
                            label={`Online Shop Domain ${index + 1}`}
                            value={domain}
                            onChange={(value) => handleDomainChange(index, value)}
                          />
                          <button 
                            type="button" 
                            className="btn btn-danger" 
                            onClick={() => handleRemoveDomain(index)}
                            style={{ height: '38px', width: '100px' }}
                          >
                            Remove
                          </button>
                        </div>
                      ))}
                      <button 
                        type="button" 
                        className="btn btn-primary mb-3" 
                        onClick={handleAddDomain}
                        style={{ height: '38px', width: '100px' }}
                      >
                        Add More
                      </button>
                      <button 
                        type="button" 
                        className="btn btn-success" 
                        onClick={handleActivate}
                        style={{ height: '38px', width: '100px' }}
                      >
                        Activate
                      </button>
                    </div>
                  </>
                )}
                <TextInputField 
                  name="prodMerchant"
                  label="Prod Merchant" 
                  value="" 
                  onChange={() => {}} 
                  hidden={prodActivationKey === 1}
                />
                <TextInputField 
                  name="prodCmerchant"
                  label="Prod Cmerchant" 
                  value="" 
                  onChange={() => {}} 
                  hidden={prodActivationKey === 1}
                />
                <TextInputField 
                  name="prodCid"
                  label="Prod C id" 
                  value="" 
                  onChange={() => {}} 
                  hidden={prodActivationKey === 1}
                />
                <TextInputField 
                  name="prodCSecret"
                  label="Prod C Secret" 
                  value="" 
                  onChange={() => {}} 
                  hidden={prodActivationKey === 1}
                />
              </div>
            )}

            <div className="card mb-4">
              <div className="card-header" onClick={() => toggleSection('advanced')} style={{cursor: 'pointer'}}>
                <h4 className="mb-0 d-flex justify-content-between align-items-center">
                  Advanced Settings
                  <span>{expandedSections.advanced ? '▼' : '▶'}</span>
                </h4>
              </div>
              <div className={`card-body ${expandedSections.advanced ? '' : 'd-none'}`}>
                <TextInputField name="logo" label="Logo" value="" onChange={() => {}} />
                <SelectField name="action" options={actionOptions} label="Action" value="" onChange={() => {}} />
                <TextInputField name="moduleVersion" label="Module version" value="" onChange={() => {}} />
                <TextInputField name="apiRequestTimeout" label="API request timeout" value="" onChange={() => {}} />
                <SelectField name="debugMode" options={yesNoOptions} label="Debug mode" value="" onChange={() => {}} />
                <SelectField name="addressPassedToModals" options={addressOptions} label="Address Passed to modals" value="" onChange={() => {}} />
                <SelectField name="errorLog" options={yesNoOptions} label="Error log" value="" onChange={() => {}} />
                <SelectField name="widgetDisplay" options={widgetDisplayOptions} label="Widget Display" value="" onChange={() => {}} />
                <TextInputField name="cacheTime" label="Cache time" value="" onChange={() => {}} />
                <SelectField name="saveCard" options={yesNoOptions} label="Save card" value="" onChange={() => {}} />
                <SelectField name="checkout" options={checkoutOptions} label="Checkout" value="" onChange={() => {}} />
                <SelectField name="banner" options={yesNoOptions} label="Banner" value="" onChange={() => {}} />
                <SelectField name="addressFailure" options={yesNoOptions} label="Address failure" value="" onChange={() => {}} />
                <TextAreaField 
                  name="customCss" 
                  label="Custom CSS" 
                  value="" 
                  onChange={() => {}} 
                  hidden={isExcludedPlatform}
                />
              </div>
            </div>

            <div className="card mb-4">
              <div className="card-header" onClick={() => toggleSection('marketing')} style={{cursor: 'pointer'}}>
                <h4 className="mb-0 d-flex justify-content-between align-items-center">
                  Advanced Marketing
                  <span>{expandedSections.marketing ? '▼' : '▶'}</span>
                </h4>
              </div>
              <div className={`card-body ${expandedSections.marketing ? '' : 'd-none'}`}>
                <MultiSelectField 
                  name="displayArea"
                  label="Display Area" 
                  options={displayAreaOptions}
                  selectedValues={[]}
                  onChange={() => {}}
                />
                <SelectField name="hook" options={hookOptions} label="Hook" value="" onChange={() => {}} />
                <SelectField name="variable" options={yesNoOptions} label="Variable" value="" onChange={() => {}} />
                <TextInputField name="priceSelect" label="Price select" value="" onChange={() => {}} />
                <TextInputField name="customPriceSelect" label="Custom price select" value="" onChange={() => {}} />
                <SelectField name="digitAvail" options={yesNoOptions} label="Digit Avail" value="" onChange={() => {}} />
                <TextInputField name="cartButtonImageUrl" label="Cart button Image URL" value="" onChange={() => {}} />
                <TextInputField name="altText" label="Alt text" value="" onChange={() => {}} />
              </div>
            </div>
          </form>
        )}

        {activeTab === "apis" && (
          <form className="api-form">
            <TextInputField name="prodApi" label="Prod API" value="" onChange={() => {}} />
            <TextInputField name="sandboxApi" label="Sandbox API" value="" onChange={() => {}} />
          </form>
        )}
      </div>
    </div>
  );
};

export default PlatformForm;