import React from "react";
import { render, screen } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import App from "./App";
import { useDispatch } from "react-redux";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
}));

describe("App Component", () => {
  let mockDispatch = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
  });

  test("renders App component with logo", () => {
    render(
      <MemoryRouter>
        <App />
      </MemoryRouter>
    );

    const logoElement = screen.getByRole("img"); // Assuming <svg> renders as an image
    expect(logoElement).toBeInTheDocument();
  });

  test("adds event listener for message event", () => {
    const addEventListenerSpy = jest.spyOn(window, "addEventListener");

    render(
      <MemoryRouter>
        <App />
      </MemoryRouter>
    );

    expect(addEventListenerSpy).toHaveBeenCalledWith("message", expect.any(Function));
  });

  test("handles message event and updates state", () => {
    render(
      <MemoryRouter>
        <App />
      </MemoryRouter>
    );

    const mockEvent = new MessageEvent("message", {
      data: {
        step: "step1",
        platform: "shopify",
        configuration: { key: "value" },
      },
    });

    act(() => {
      window.dispatchEvent(mockEvent);
    });

    expect(mockDispatch).toHaveBeenCalledWith({
      type: "setMessageData",
      payload: mockEvent.data,
    });
  });

  test("renders the correct routes", () => {
    render(
      <MemoryRouter initialEntries={["/advertising"]}>
        <App />
      </MemoryRouter>
    );

    expect(screen.getByText(/AdvertisingForm/i)).toBeInTheDocument();
  });
});
