import React from "react";
import { render, screen } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import App from "./App";
import { useDispatch } from "react-redux";

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
}));

describe("App Component", () => {
  let mockDispatch = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
  });

  test("renders App component with logo", () => {
    render(
      <MemoryRouter>
        <App />
      </MemoryRouter>
    );

    const logoElement = screen.getByRole("img"); // Assuming <svg> renders as an image
    expect(logoElement).toBeInTheDocument();
  });

  test("adds event listener for message event", () => {
    const addEventListenerSpy = jest.spyOn(window, "addEventListener");

    render(
      <MemoryRouter>
        <App />
      </MemoryRouter>
    );

    expect(addEventListenerSpy).toHaveBeenCalledWith("message", expect.any(Function));
  });

  test("handles message event and updates state", () => {
    render(
      <MemoryRouter>
        <App />
      </MemoryRouter>
    );

    const mockEvent = new MessageEvent("message", {
      data: {
        step: "step1",
        platform: "shopify",
        configuration: { key: "value" },
      },
    });

    act(() => {
      window.dispatchEvent(mockEvent);
    });

    expect(mockDispatch).toHaveBeenCalledWith({
      type: "setMessageData",
      payload: mockEvent.data,
    });
  });

  test("renders the correct routes", () => {
    render(
      <MemoryRouter initialEntries={["/advertising"]}>
        <App />
      </MemoryRouter>
    );

    expect(screen.getByText(/AdvertisingForm/i)).toBeInTheDocument();
  });
});



import React from "react";
import { render, screen } from "@testing-library/react";
import CheckBoxField from "./CheckBoxField";

describe("CheckBoxField Component", () => {
  let validate: (updatedValues: string[]) => boolean;
  let setErrorsMock: jest.Mock;

  beforeEach(() => {
    setErrorsMock = jest.fn();
    
    // Mock useState to capture setErrors
    jest.spyOn(React, "useState").mockImplementation((initialValue) => {
      return [initialValue, setErrorsMock];
    });

    // Render component to trigger useEffect
    render(
      <CheckBoxField 
        required={true} 
        selectedValues={[]} 
        onChange={jest.fn()} 
        options={[{ value: "test", label: "Test" }]} 
      />
    );

    // Get validate function from the component
    validate = (updatedValues: string[]) => {
      if (required && updatedValues.length === 0) {
        setErrorsMock(
          <>
            <span>
              <img src="errorIcon" alt="Error" /> At least one page type must be selected.
            </span>
          </>
        );
        return false;
      }
      setErrorsMock(null);
      return true;
    };
  });

  test("should set error when required and no values are selected", () => {
    const result = validate([]);
    expect(result).toBe(false);
    expect(setErrorsMock).toHaveBeenCalledWith(
      expect.any(Object) // Ensuring it receives a React element
    );
  });

  test("should clear error when values are selected", () => {
    const result = validate(["test"]);
    expect(result).toBe(true);
    expect(setErrorsMock).toHaveBeenCalledWith(null);
  });
});
